local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "üê±‚ÄçüêâChopcheatsüê±‚Äçüêâ",
   LoadingTitle = "‚≠êBest script for free‚≠ê",
   LoadingSubtitle = "by ‚≠êSwordSlide‚≠ê",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})


local Tab = Window:CreateTab("Home", 111909813082111) -- Title, Image

local Section = Tab:CreateSection("üòµ‚Äçüí´Aimbotüòµ‚Äçüí´")

-- Services
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera
local mouse = player:GetMouse()

-- Create a new Drawing object for the FOV circle
local circle = Drawing.new("Circle")
circle.Visible = true
circle.Color = Color3.fromRGB(255, 0, 0)
circle.Thickness = 2
circle.Filled = false

-- Variables to store the aimbot state
local isRightMouseDown = false
local aimbotEnabled = false
local aimbotConnection = nil
local keybindEnabled = true -- New variable to track keybind state

-- Function to update the FOV circle size and position
local function updateCircle()
    local viewportSize = camera.ViewportSize
    local radius = math.tan(math.rad(20)) * viewportSize.Y / 2
    circle.Position = Vector2.new(viewportSize.X / 2, viewportSize.Y / 2)
    circle.Radius = radius
end

-- Function to check if a point is inside the FOV circle
local function isInFOVCircle(point)
    local circleCenter = circle.Position
    local radius = circle.Radius
    return (point - circleCenter).Magnitude <= radius
end

-- Function to find the closest target within the FOV
local function findTarget()
    local closestTarget = nil
    local shortestDistance = math.huge

    for _, otherPlayer in pairs(Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("Head") then
            local head = otherPlayer.Character.Head
            local screenPoint = camera:WorldToViewportPoint(head.Position)

            if isInFOVCircle(Vector2.new(screenPoint.X, screenPoint.Y)) then
                local distance = (Vector2.new(screenPoint.X, screenPoint.Y) - Vector2.new(mouse.X, mouse.Y)).Magnitude
                if distance < shortestDistance then
                    closestTarget = head
                    shortestDistance = distance
                end
            end
        end
    end

    return closestTarget
end

-- Function to handle aiming at the target
local function aimAtTarget(target)
    if target then
        camera.CFrame = CFrame.new(camera.CFrame.Position, target.Position)
    end
end

-- Function to continuously aim at the target while holding right-click
local function followTarget()
    while isRightMouseDown and aimbotEnabled do
        local target = findTarget()
        aimAtTarget(target)
        RunService.RenderStepped:Wait()
    end
end

-- Function to start the aimbot
local function startAimbot()
    aimbotEnabled = true
    circle.Visible = true
    
    -- Update the circle on each render step
    aimbotConnection = RunService.RenderStepped:Connect(updateCircle)

    -- Connect right mouse button down event
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if input.UserInputType == Enum.UserInputType.MouseButton2 and not gameProcessed and aimbotEnabled and keybindEnabled then
            isRightMouseDown = true
            followTarget()
        end
    end)

    -- Connect right mouse button up event
    UserInputService.InputEnded:Connect(function(input, gameProcessed)
        if input.UserInputType == Enum.UserInputType.MouseButton2 and not gameProcessed then
            isRightMouseDown = false
        end
    end)
end

-- Function to stop the aimbot
local function stopAimbot()
    aimbotEnabled = false
    circle.Visible = false
    isRightMouseDown = false -- Ensure we stop aiming immediately
    if aimbotConnection then
        aimbotConnection:Disconnect()
        aimbotConnection = nil
    end
end

-- Keybind logic to enable/disable the aimbot
local Keybind = Tab:CreateKeybind({
    Name = "‚å®Ô∏èAimbot Keybind‚å®Ô∏è",
    CurrentKeybind = "U",
    HoldToInteract = false,
    Flag = "AimbotKeybind",
    Callback = function(Keybind)
        if keybindEnabled then
            if aimbotEnabled then
                stopAimbot()
                print("Aimbot disabled")
            else
                startAimbot()
                print("Aimbot enabled")
            end
        end
    end,
})

-- Toggle to enable/disable the keybind
local KeybindToggle = Tab:CreateToggle({
    Name = "‚úÖEnable Aimbot Keybind‚úÖ",
    CurrentValue = true,
    Flag = "KeybindToggle",
    Callback = function(Value)
        keybindEnabled = Value
        if not keybindEnabled and aimbotEnabled then
            stopAimbot() -- Stop aimbot if toggled off
            print("Keybind disabled, aimbot stopped.")
        end
    end,
})

-- Clean up the circle when the script is disabled
local function cleanUp()
    if circle then
        circle:Remove()
    end
    stopAimbot() -- Ensure the aimbot is stopped during cleanup
end

-- Connect the clean-up function to the script's lifecycle
game:GetService("RunService").Stepped:Connect(function()
    if not player.Character then
        cleanUp()
    end
end)

--End aimbot

local Section = Tab:CreateSection("üî´TiggerBotV1üî´")

-- Services
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera
local mouse = player:GetMouse()

-- Variables to store triggerbot state
local triggerbotEnabled = false
local triggerbotConnection = nil
local keybindEnabled = true -- Variable to track keybind state

-- Function to check if a point is inside the screen
local function isInScreenCenter(point)
    local screenCenter = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    return (point - screenCenter).Magnitude <= 50 -- Adjust the radius as needed
end

-- Function to find the closest target within the screen center
local function findTarget()
    local closestTarget = nil

    for _, otherPlayer in pairs(Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("Head") then
            local head = otherPlayer.Character.Head
            local screenPoint = camera:WorldToViewportPoint(head.Position)

            if isInScreenCenter(Vector2.new(screenPoint.X, screenPoint.Y)) then
                closestTarget = head
                break -- We only need to find one target to trigger the click
            end
        end
    end

    return closestTarget
end

-- Function to simulate a mouse click
local function simulateClick()
    local inputObject = Instance.new("InputObject")
    inputObject.UserInputType = Enum.UserInputType.MouseButton1
    inputObject.Position = Vector2.new(mouse.X, mouse.Y)

    UserInputService.InputBegan:Fire(inputObject, false) -- Simulate mouse button down
    UserInputService.InputEnded:Fire(inputObject, false) -- Simulate mouse button up
end

-- Function to continuously check for targets and trigger the click
local function triggerAtTarget()
    while triggerbotEnabled do
        local target = findTarget()
        if target then
            simulateClick() -- Perform the click if a target is found
        end
        RunService.RenderStepped:Wait()
    end
end

-- Function to start the triggerbot
local function startTriggerbot()
    triggerbotEnabled = true
    
    -- Start checking for targets
    triggerAtTarget()
end

-- Function to stop the triggerbot
local function stopTriggerbot()
    triggerbotEnabled = false
    if triggerbotConnection then
        triggerbotConnection:Disconnect()
        triggerbotConnection = nil
    end
end

-- Keybind to control the triggerbot
local Keybind = Tab:CreateKeybind({
   Name = "‚å®Ô∏èTriggerbot Keybind‚å®Ô∏è",
   CurrentKeybind = "T", -- Change to your desired key
   HoldToInteract = false,
   Flag = "Keybind1", -- A flag for the configuration file
   Callback = function(Keybind)
       if keybindEnabled then -- Check if the keybind is enabled
           if triggerbotEnabled then
               stopTriggerbot()
           else
               startTriggerbot()
           end
       end
   end,
})

-- Toggle to enable/disable the triggerbot keybind
local toggleKeybindEnabled = Tab:CreateToggle({
    Name = "‚úÖEnable Triggerbot Keybind‚úÖ",
    CurrentValue = true, -- Default to enabled
    Flag = "ToggleKeybind", -- A flag for configuration
    Callback = function(Value)
        keybindEnabled = Value -- Update the keybind state
    end,
 })


--Toggle

local Section = Tab:CreateSection("Teleporter")


local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Function to find the most distant player
local function GetMostDistantPlayer()
    local maxDistance = 0
    local mostDistantPlayer = nil

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (player.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
            if distance > maxDistance then
                maxDistance = distance
                mostDistantPlayer = player
            end
        end
    end

    return mostDistantPlayer
end

-- Teleport Function
local function TeleportToPlayer(player)
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        LocalPlayer.Character:SetPrimaryPartCFrame(player.Character.HumanoidRootPart.CFrame)
    end
end

-- Variables for toggle state
local teleportEnabled = false

-- Toggle for enabling/disabling the teleport functionality
local Toggle = Tab:CreateToggle({
    Name = "üñ®Ô∏èEnable Teleportüñ®Ô∏è",
    CurrentValue = false,
    Flag = "Toggle1", -- Unique flag
    Callback = function(Value)
        teleportEnabled = Value -- Update the toggle state
    end,
})

-- Keybind for teleporting to the most distant player (only works if toggle is enabled)
local Keybind = Tab:CreateKeybind({
    Name = "üñ®Ô∏èTeleport to Most Distant Playerüñ®Ô∏è",
    CurrentKeybind = "Q",
    HoldToInteract = false,
    Flag = "Keybind1", -- Unique flag
    Callback = function(Keybind)
        if teleportEnabled then -- Check if teleport is enabled
            local mostDistantPlayer = GetMostDistantPlayer()
            if mostDistantPlayer then
                TeleportToPlayer(mostDistantPlayer)
            else
                print("No distant player found!")
            end
        else
            print("Teleport is disabled, please enable the toggle first.")
        end
    end,
})


--end toggle

local Section = Tab:CreateSection("Player")

local Slider = Tab:CreateSlider({
    Name = "FOV",
    Range = {50, 150},
    Increment = 10,
    Suffix = "FOV",
    CurrentValue = 90,
    Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    -- Adjust the player's FOV when the slider changes
    local player = game.Players.LocalPlayer
    local camera = game.Workspace.CurrentCamera
    
    -- Set the camera's FOV to the slider value
    camera.FieldOfView = Value
    end,
 })

local Tab = Window:CreateTab("Visuals", 997927536) -- Title, Image

local Section = Tab:CreateSection("üî¥ESPüî¥")

local Button = Tab:CreateButton({
   Name = "üßëESPüßë",
   Callback = function()
      loadstring(game:HttpGet('https://raw.githubusercontent.com/MacPacS/RbxESP/refs/heads/main/ESP.lua'))()
   end,
})
local Section = Tab:CreateSection("ü¶¥Skeletonü¶¥")

local Button = Tab:CreateButton({
    Name = "ü¶¥Skeletonü¶¥",
    Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/Blissful4992/ESPs/refs/heads/main/SkeletonESP.lua'))()
    end,
 })
 local Section = Tab:CreateSection("üì©ArrowsV2üì©")

 local Button = Tab:CreateButton({
    Name = "üì©Arrowsüì©",
    Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/Blissful4992/ESPs/refs/heads/main/Arrows.lua'))()
    end,
 })

local Tab = Window:CreateTab("Settings", 10269756577) -- Title, Image

local Section = Tab:CreateSection("üìñMain - stuffüìñ")

local Section = Tab:CreateSection("ü¶òUlimated jumps - brokenü¶ò")

local Button = Tab:CreateButton({
   Name = "ü¶òUlimated Jumpsü¶ò",
   Callback = function()
   -- Auto Bhop / Auto Jump Script

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")

-- Get the local player
local LocalPlayer = Players.LocalPlayer

-- Function to check if the character is grounded (on the ground)
local function isGrounded(humanoid)
    return humanoid:GetState() == Enum.HumanoidStateType.Running or humanoid:GetState() == Enum.HumanoidStateType.Landed
end

-- Function to handle the auto-jump
local function autoJump()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
        local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        
        -- If spacebar is pressed and the character is grounded, jump
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) and isGrounded(humanoid) then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end

-- Main loop to check for input and jump continuously
while true do
    autoJump()
    wait(0.1) -- Adjust the wait time to control how often jumps occur
end

   end,
})
local Section = Tab:CreateSection("‚ö°FPS booster - V2‚ö°")

local Button = Tab:CreateButton({
   Name = "‚ö°Fps-Booster V2‚ö°",
   Callback = function()
   
      --begin
      -- Function to remove high-impact objects and set all parts to black
local function optimizeForPerformance()
   -- Function to blackify parts and remove unnecessary features
   local function blackifyPart(part)
       if part:IsA("BasePart") then
           -- Set the part's color to black
           part.BrickColor = BrickColor.new("Really black")
           -- Remove any textures or decals
           for _, child in ipairs(part:GetChildren()) do
               if child:IsA("Texture") or child:IsA("Decal") then
                   child:Destroy()
               end
           end
           -- Remove surface effects (like studs, inlets, etc.)
           part.TopSurface = Enum.SurfaceType.Smooth
           part.BottomSurface = Enum.SurfaceType.Smooth
           part.FrontSurface = Enum.SurfaceType.Smooth
           part.BackSurface = Enum.SurfaceType.Smooth
           part.LeftSurface = Enum.SurfaceType.Smooth
           part.RightSurface = Enum.SurfaceType.Smooth
           
           -- Set material to smooth plastic
           part.Material = Enum.Material.SmoothPlastic

           -- Set transparency to 0 (removes transparent effects)
           part.Transparency = 0

           -- Remove reflectance (lower lighting calculations)
           part.Reflectance = 0
       end
   end

   -- Remove particles, lights, and effects
   local function removeHighImpactObjects(object)
       if object:IsA("ParticleEmitter") or object:IsA("Fire") or object:IsA("Smoke") or object:IsA("Sparkles") then
           object:Destroy()
       elseif object:IsA("Light") then
           object.Enabled = false -- Disable all lights
       end
   end

   -- Iterate over all objects in the workspace
   for _, obj in ipairs(workspace:GetDescendants()) do
       if obj:IsA("Model") then
           -- Remove accessories from character models
           for _, child in ipairs(obj:GetChildren()) do
               if child:IsA("Accessory") then
                   child:Destroy() -- Remove accessories
               end
           end
           -- Blackify each part inside the model
           for _, part in ipairs(obj:GetDescendants()) do
               blackifyPart(part)
               removeHighImpactObjects(part)
           end
       elseif obj:IsA("BasePart") then
           blackifyPart(obj)
       end
       removeHighImpactObjects(obj)
   end
end

-- Function to lower graphics settings to minimum
local function setLowGraphicsSettings()
   -- Get the player's graphics settings
   local settings = UserSettings():GetService("UserGameSettings")

   -- Set graphics settings to the lowest quality
   settings.GraphicsQualityLevel = Enum.SavedQualitySetting.Low
   settings.SavedQualityLevel = Enum.SavedQualitySetting.Low
   settings.MasterVolume = 0 -- Optional: turn off all sounds
end

-- Disable shadows for better performance
local function disableShadows()
   game.Lighting.GlobalShadows = false
   game.Lighting.OutdoorAmbient = Color3.fromRGB(127, 127, 127) -- Neutral ambient lighting
end

-- Call the functions to apply optimizations
optimizeForPerformance()
setLowGraphicsSettings()
disableShadows()

-- Optional: print message to indicate that optimizations have been applied
print("Optimizations applied: All parts set to black, graphics settings set to low, and high-impact objects removed.")


--end
   end,
})

local Button = Tab:CreateButton({
    Name = "üêáHop serverüêá",
    Callback = function()
        local TeleportService = game:GetService("TeleportService")
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        
        -- Function to rejoin the game but on a different server
        local function RejoinDifferentServer()
            local gameId = game.PlaceId
            local servers = TeleportService:GetPlayerPlaceInstanceAsync(gameId)
        
            -- Filtering out the current server's ID
            local currentServerId = game.JobId
            for _, server in pairs(servers) do
                if server.JobId ~= currentServerId then
                    -- Teleport to a different server
                    TeleportService:TeleportToPlaceInstance(gameId, server.JobId, player)
                    return
                end
            end
        
            -- If no different servers are found, just rejoin a random server
            TeleportService:Teleport(gameId)
        end
        
        -- Example: Calling the function to rejoin a different server
        RejoinDifferentServer()
        
    end,
 })

 local Button = Tab:CreateButton({
    Name = "üîÑRejoin same serverüîÑ",
    Callback = function()
        local TeleportService = game:GetService("TeleportService")
        local player = game.Players.LocalPlayer
        
        -- Function to rejoin the current server
        local function RejoinSameServer()
            local gameId = game.PlaceId
            -- Teleport the player to the same game (rejoin)
            TeleportService:Teleport(gameId, player)
        end
        
        -- Example: Calling the function to rejoin the same server
        RejoinSameServer()
        
    end,
 })

 local Section = Tab:CreateSection("made with ‚ù§Ô∏è by SwordSlide")
